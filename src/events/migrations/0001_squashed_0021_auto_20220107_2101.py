# Generated by Django 3.2.3 on 2022-01-07 21:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('events', '0001_initial'), ('events', '0002_auto_20210921_1912'), ('events', '0003_costs'), ('events', '0004_auto_20210930_2039'), ('events', '0005_auto_20211116_1916'), ('events', '0006_alter_ticket_owner'), ('events', '0007_auto_20211125_1843'), ('events', '0008_event_num_participants_per_ticket'), ('events', '0009_auto_20211130_1834'), ('events', '0010_auto_20211130_1914'), ('events', '0011_alter_participant_order'), ('events', '0012_participant_person_nr'), ('events', '0013_auto_20211208_1840'), ('events', '0014_auto_20211214_2002'), ('events', '0015_auto_20211215_1637'), ('events', '0016_event_last_payment_date'), ('events', '0017_auto_20220106_1627'), ('events', '0018_auto_20220106_1928'), ('events', '0019_auto_20220107_1148'), ('events', '0020_auto_20220107_1730'), ('events', '0021_auto_20220107_2101')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailimages', '0023_add_choose_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Costs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='This field identifies the cost list.', max_length=255, verbose_name='Cost list name')),
                ('fields', models.JSONField(help_text='These fields determine what each participant can purchase. They each need their name (key) and field type.', verbose_name='Purchaseable items')),
            ],
            options={
                'verbose_name': 'Costs',
                'verbose_name_plural': 'Costs',
                'ordering': ['name'],
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='This is the display name for the event', max_length=255, verbose_name='Name of event')),
                ('description', models.TextField(help_text='This is the long text shown as description for the event.', max_length=1000, verbose_name='Description for event')),
                ('start_date', models.DateTimeField(help_text='This dictates when the event is considered as ongoing.', verbose_name='Event start time')),
                ('end_date', models.DateTimeField(help_text='This dictates when the event is considered finished.', verbose_name='Event end time')),
                ('removed', models.BooleanField(default=False)),
                ('image', models.ForeignKey(blank=True, help_text='Recommended size of TODO', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
                ('num_tickets', models.IntegerField(default=1, help_text='This dictates the number of individual entries to the event.', verbose_name='Number of entries')),
                ('price_list', models.ForeignKey(blank=True, help_text='The price list for each participant', null=True, on_delete=django.db.models.deletion.PROTECT, to='events.costs', verbose_name='Price list')),
                ('first_come_first_serve', models.BooleanField(default=False, help_text='Immediately assign applicants first-come-first-serve. Not suitable for events that raffle their entries.', verbose_name='First come first serve')),
                ('num_participants_per_ticket', models.IntegerField(default=1, help_text="This dictates the number of participants that each ticket entry allows. For example, the puzzle hunt rally would want this to be 9. Don't set this to be less than 1.", verbose_name='Number of participants per ticket')),
                ('base_price', models.IntegerField(default=0, help_text='Base ticket price. For example, 600 for a rally entry.', verbose_name='Ticket price')),
                ('price_per_participant', models.IntegerField(default=0, help_text='Price per participant, independent of their order. For example, 1100 for a ball seat', verbose_name='Price per participant')),
                ('last_payment_date', models.DateTimeField(help_text='After this time, the event is no longer payed for, and unpaid tickets are invalidated.', null=True, verbose_name='Event final payment date & time')),
                ('end_of_application', models.DateTimeField(default=django.utils.timezone.now, help_text='After this date, it will no longer be possible to apply.', verbose_name='Application end time')),
                ('info_for_participants', models.TextField(blank=True, help_text='This separate information will be presented to those who recieve tickets.', max_length=1000, null=True, verbose_name='Information for participants')),
                ('published', models.BooleanField(default=False, help_text='Determines if the event is visible or not', verbose_name='Event published')),
                ('contact_email', models.EmailField(blank=True, help_text='Email address for who to contact regarding this event.', max_length=254, null=True, verbose_name='Email for contact')),
                ('price_per_participant_nonmember', models.IntegerField(default=0, help_text='Price per non-UTN-member participant, independent of their order. For example, 1100 for a ball seat', verbose_name='Price per non-member participant')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'default_permissions': (),
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.IntegerField(verbose_name='Ticket number')),
                ('removed', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('num_extra_participants', models.IntegerField(default=0, help_text='Dictates the number of participants in the ticket besides the ticket owner.', verbose_name='Extra participants')),
                ('locked', models.BooleanField(default=False, help_text='This field is filled in if the ticket owner has signaled that they are ready to pay.', verbose_name='Locked for payment')),
                ('payment_status', models.CharField(choices=[('unpaid', 'Unpaid'), ('pending', 'Payment pending'), ('paid', 'Paid')], default='unpaid', max_length=16)),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='EventApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('removed', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.event')),
                ('event_applicant', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Application',
                'verbose_name_plural': 'Event Applications',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventapplication')),
                ('ticket', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='This field identifies the participant type.', max_length=255, verbose_name='Participant name')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.ticket')),
                ('order', models.JSONField(default=dict)),
                ('person_nr', models.CharField(default=None, help_text='Person number using the YYYYMMDD-XXXX format.', max_length=13, verbose_name='Person number')),
            ],
            options={
                'verbose_name': 'ParticipantType',
                'verbose_name_plural': 'ParticipantTypes',
                'ordering': ['name'],
                'default_permissions': (),
            },
        ),
    ]
